name: Dart CI

on:
  # Run on PRs and pushes to the default branch.
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/oauth2.yml'
      - 'pkgs/oauth2/**'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/oauth2.yml'
      - 'pkgs/oauth2/**'
  schedule:
    - cron: "0 0 * * 0"

env:
  PUB_ENVIRONMENT: bot.github

jobs:
  # Check code formatting and lints against Dart dev, check analyzer warnings
  # against the oldest supported SDK.
  analyze:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: pkgs/oauth2/
    strategy:
      fail-fast: false
      matrix:
        sdk: [dev]
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938
      - uses: dart-lang/setup-dart@0a8a0fc875eb934c15d08629302413c671d3f672
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .
        if: matrix.sdk == 'dev' && steps.install.outcome == 'success'
      - name: Analyze code
        run: dart analyze --fatal-infos
        if: matrix.sdk == 'dev' && steps.install.outcome == 'success'
      - name: Analyze code
        run: dart analyze
        if: matrix.sdk != 'dev' && steps.install.outcome == 'success'

  # Run tests on a matrix consisting of two dimensions:
  # 1. OS: ubuntu-latest, (macos-latest, windows-latest)
  # 2. release channel: dev
  test:
    needs: analyze
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: pkgs/oauth2/
    strategy:
      fail-fast: false
      matrix:
        # Add macos-latest and/or windows-latest if relevant for this package.
        os: [ubuntu-latest]
        sdk: [3.4, dev]
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938
      - uses: dart-lang/setup-dart@0a8a0fc875eb934c15d08629302413c671d3f672
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Run VM tests
        run: dart test --platform vm
        if: always() && steps.install.outcome == 'success'
      - name: Run Chrome tests
        run: dart test --platform chrome
        if: always() && steps.install.outcome == 'success'
